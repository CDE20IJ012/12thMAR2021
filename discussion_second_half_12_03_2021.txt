* How to write configuration with the java code itself?
* sessionFactory.close()
* HQL is better in comparison to native query.
* Query and Criteria
------------------------------------------------------------------
Hibernate           Spring Boot

Spring Boot will help in easy and quickere development of 
Enterprise application as very little configuration we need
to do in comparison to Spring.

Hibernate is used as an ORM Tool.

JPA ====> Java Persitence API which is giving as the specification.
Hibernate is implementing that specification. 
------------------------------------------------------------------

Spring Boot and Hibernate will be used. ( You can execute and
test through command line)
as a part of starter dependencies:
* For Hibernate/JPA. ( Spring Data JPA)
* For MySQL connectivity ( MySQL Driver)

------------------------------------------------------------------

@Entity class will be created.

Stereotype annotations of Spring :- ( Always used at the class level) 
@Component ( Generic stereotype annotations for any component to be managed by the container)
|
|
|--------   @Repository ( stereotype annotation which recognizes a class which is handling the database connection. The SQLException thrown by the method will be translated into Spring's DataAccessException ) 
|--------   @Controller ( stereotypes a class which acts as Spring MVC Controller)
|-------     @Service ( stereotypes a class which acts as a Service)
-----------------------------------------------------------------------------------
Entity
package com.demo.cts.domain;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="book_details")
public class Book {
	@Id
	@GeneratedValue
	@Column(name="id")
	private int bookId;
	@Column(name="book_title")
	private String title;
	@Column(name="author_name")
	private String author;
	@Column(name="book_price")
	private float price;
	
	
	public Book() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	public Book(int bookId, String title, String author, float price) {
		super();
		this.bookId = bookId;
		this.title = title;
		this.author = author;
		this.price = price;
	}

	public int getBookId() {
		return bookId;
	}
	public void setBookId(int bookId) {
		this.bookId = bookId;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public String getAuthor() {
		return author;
	}
	public void setAuthor(String author) {
		this.author = author;
	}
	public float getPrice() {
		return price;
	}
	public void setPrice(float price) {
		this.price = price;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((author == null) ? 0 : author.hashCode());
		result = prime * result + bookId;
		result = prime * result + Float.floatToIntBits(price);
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Book other = (Book) obj;
		if (author == null) {
			if (other.author != null)
				return false;
		} else if (!author.equals(other.author))
			return false;
		if (bookId != other.bookId)
			return false;
		if (Float.floatToIntBits(price) != Float.floatToIntBits(other.price))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}
	@Override
	public String toString() {
		return "Book [bookId=" + bookId + ", title=" + title + ", author=" + author + ", price=" + price + "]";
	}
	

}
---------------------------------------------------------------------------------------------------
Repository

package com.demo.cts.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.demo.cts.domain.Book;

@Repository
public interface BookRepository extends JpaRepository<Book, Integer> {

}
--------------------------------------------------------------------------------------------------------
application.properties ( So it is for keeping some configuration info)

spring.datasource.url=jdbc:mysql://localhost:3306/bookDB
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=password@123
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect




---------------------------------------------------------------------------------------
https://zetcode.com/springboot/commandlinerunner/
------------------------------------------------------------------------------------------


package com.demo.cts;

import java.util.Scanner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.demo.cts.dao.BookRepository;
import com.demo.cts.domain.Book;

@SpringBootApplication
public class SpringboothibernateApplication implements CommandLineRunner{

    @Autowired
	private BookRepository bookRepository;
	
	public static void main(String[] args) {
		SpringApplication.run(SpringboothibernateApplication.class, args);
		
	}

	@Override
	public void run(String... args) throws Exception {
	Book book=new Book();
		Scanner scanner=new Scanner(System.in);	
	    System.out.println("Enter the tile");
	    String title=scanner.next();
	    System.out.println("Enter the author");
	    String author=scanner.next();
	    System.out.println("Enter the price");
	    int price=scanner.nextInt();
	    book.setTitle("AWS");
	    book.setAuthor("JAmes");
	    book.setPrice(1000);
	    bookRepository.save(book);
	    System.out.println("Book added!!!!!!!!!!");
	    
		
		
		
	}
	
	

}

------------------------------------------------------------------------------------------------------------
Spring boot MVC and inserting record through insert.jsp

  title
  author
  price
----------------------------------------------------------------------------------------------------------- 




